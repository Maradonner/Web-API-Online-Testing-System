// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TestingSystem.Data;

#nullable disable

namespace TestingSystem.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20230502072736_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("TestingSystem.Models.ActiveTrivia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("TriviaQuizId")
                        .HasColumnType("integer");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TriviaQuizId");

                    b.ToTable("ActiveTrivias");
                });

            modelBuilder.Entity("TestingSystem.Models.Answer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ActiveTriviaId")
                        .HasColumnType("integer");

                    b.Property<int>("CorrectAnswerId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("boolean");

                    b.Property<int>("TriviaOptionId")
                        .HasColumnType("integer");

                    b.Property<int>("TriviaQuestionId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ActiveTriviaId");

                    b.ToTable("Answers");
                });

            modelBuilder.Entity("TestingSystem.Models.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CourseCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TeacherId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TeacherId");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("TestingSystem.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("TestingSystem.Models.StudentCourse", b =>
                {
                    b.Property<int>("StudentId")
                        .HasColumnType("integer");

                    b.Property<int>("CourseId")
                        .HasColumnType("integer");

                    b.HasKey("StudentId", "CourseId");

                    b.HasIndex("CourseId");

                    b.ToTable("StudentCourses");
                });

            modelBuilder.Entity("TestingSystem.Models.TriviaOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("boolean");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TriviaQuestionId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TriviaQuestionId");

                    b.ToTable("TriviaOptions");
                });

            modelBuilder.Entity("TestingSystem.Models.TriviaQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("PictureUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TriviaQuizId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TriviaQuizId");

                    b.ToTable("TriviaQuestions");
                });

            modelBuilder.Entity("TestingSystem.Models.TriviaQuiz", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("AccumulateTime")
                        .HasColumnType("boolean");

                    b.Property<int?>("CourseId")
                        .HasColumnType("integer");

                    b.Property<int?>("LivesCount")
                        .HasColumnType("integer");

                    b.Property<string>("PictureUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("QuestionTime")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("TriviaQuizzes");
                });

            modelBuilder.Entity("TestingSystem.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("RoleId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("TokenCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("TokenExpired")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("TestingSystem.Models.ActiveTrivia", b =>
                {
                    b.HasOne("TestingSystem.Models.TriviaQuiz", "TriviaQuiz")
                        .WithMany()
                        .HasForeignKey("TriviaQuizId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TriviaQuiz");
                });

            modelBuilder.Entity("TestingSystem.Models.Answer", b =>
                {
                    b.HasOne("TestingSystem.Models.ActiveTrivia", "ActiveTrivia")
                        .WithMany("Answers")
                        .HasForeignKey("ActiveTriviaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ActiveTrivia");
                });

            modelBuilder.Entity("TestingSystem.Models.Course", b =>
                {
                    b.HasOne("TestingSystem.Models.User", "Teacher")
                        .WithMany()
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("TestingSystem.Models.StudentCourse", b =>
                {
                    b.HasOne("TestingSystem.Models.Course", "Course")
                        .WithMany("StudentCourses")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TestingSystem.Models.User", "Student")
                        .WithMany("StudentCourses")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("TestingSystem.Models.TriviaOption", b =>
                {
                    b.HasOne("TestingSystem.Models.TriviaQuestion", "TriviaQuestion")
                        .WithMany("Options")
                        .HasForeignKey("TriviaQuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TriviaQuestion");
                });

            modelBuilder.Entity("TestingSystem.Models.TriviaQuestion", b =>
                {
                    b.HasOne("TestingSystem.Models.TriviaQuiz", "TriviaQuiz")
                        .WithMany("Questions")
                        .HasForeignKey("TriviaQuizId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TriviaQuiz");
                });

            modelBuilder.Entity("TestingSystem.Models.TriviaQuiz", b =>
                {
                    b.HasOne("TestingSystem.Models.Course", null)
                        .WithMany("TriviaQuizzes")
                        .HasForeignKey("CourseId");
                });

            modelBuilder.Entity("TestingSystem.Models.User", b =>
                {
                    b.HasOne("TestingSystem.Models.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Role");
                });

            modelBuilder.Entity("TestingSystem.Models.ActiveTrivia", b =>
                {
                    b.Navigation("Answers");
                });

            modelBuilder.Entity("TestingSystem.Models.Course", b =>
                {
                    b.Navigation("StudentCourses");

                    b.Navigation("TriviaQuizzes");
                });

            modelBuilder.Entity("TestingSystem.Models.TriviaQuestion", b =>
                {
                    b.Navigation("Options");
                });

            modelBuilder.Entity("TestingSystem.Models.TriviaQuiz", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("TestingSystem.Models.User", b =>
                {
                    b.Navigation("StudentCourses");
                });
#pragma warning restore 612, 618
        }
    }
}
